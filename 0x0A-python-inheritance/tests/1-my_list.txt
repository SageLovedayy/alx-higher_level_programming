# TESTS / 1-my_list.py
# run the test with python3 -m doctest -v ./tests/[filename].txt

>>> MyList = __import__('1-my_list').MyList

# SUCCESS CASES:

# Test integers (assuming all elements are of type int):
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(50)
>>> my_list.append(-1)
>>> assert my_list == [3, 50, -1]
>>> my_list.print_sorted()
>>> assert my_list == [-1, 3, 50]

# Test sorting when the list has only one element:
>>> solo = MyList()
>>> solo.append(-99999)
>>> assert solo == [-99999]
>>> solo.print_sorted()
>>> assert solo == [-99999]

# Test sorting an empty list:
>>> empty = MyList()
>>> assert empty == []
>>> empty.print_sorted()
>>> assert empty == []

# Test type, isinstance, issubclass:
>>> assert type(MyList()) is MyList
>>> assert isinstance(MyList(), object)
>>> assert not isinstance(MyList(), list)
>>> assert issubclass(MyList, list)
>>> assert 'print_sorted' in dir(MyList)

# Test that print_sorted() does not modify the original list:
>>> original_list = MyList()
>>> original_list.append(-300)
>>> original_list.append(50)
>>> original_list.append(-1)
>>> original_list_id = id(original_list)
>>> sorted_list = original_list.print_sorted()
>>> assert original_list == [-300, 50, -1]
>>> assert sorted_list == [-300, -1, 50]
>>> assert original_list_id != id(sorted_list)

# FAIL CASES:

# Test appending elements of different types
>>> mixed_type_list = MyList()
>>> mixed_type_list.append(5)
>>> mixed_type_list.append("hello")  # This should fail
# Expected: TypeError

# Test sorting a list with non-integer elements
>>> non_integer_list = MyList()
>>> non_integer_list.append("apple")  # This should fail
# Expected: TypeError

# Test print_sorted on an empty list
>>> empty_list = MyList()
>>> empty_list.print_sorted()  # This should fail
# Expected: AttributeError

# Test calling print_sorted without appending any elements
>>> uninitialized_list = MyList()
>>> uninitialized_list.print_sorted()  # This should fail
# Expected: AttributeError
